git config user.name
git config user.name "Jannah Claravall"
npm init -y
npm install
npm install express

// http://localhost:4000/employees
app.get('/employees', (req, res) => {
    if (req.query) {
        if (req.query.id) {
            // http://localhost:4000/employees?id=1
            const employee = employees.find((employee) => employee.id === parseInt(req.query.id));
            if (employee) {
                res.json(employee);
            } else {
                res.status(404).json();
            }
            return;
        }
    }

    res.json(employees);
});

// http://localhost:4000/employees/1
app.get('/employees/:id', (req, res) => {
    const id = req.params.id;
    const employee = employees.find((employee) => employee.id === parseInt(id));

    if (employee) {
        res.json(employee);
    } else {
        res.status(404).json();
    }
});

// http://localhost:4000/employees - { "name": "New employee" }
app.post('/employees', (req, res) => {
    employeeId++;
    req.body.id = employeeID;
    req.body.firstName = "";
    req.body.lastName = "";
    req.body.position = "";
    req.body.department = "";
    req.body.isWorkingFromHome = false;
    employees.push(req.body);
    res.status(201).json();
});

//http://localhost:4000/employees/1 - { "name": "employee 1 Updated", "isDone": true } | { "name": "employee 1 Updated" } | { "isDone": true }
app.put('/employees/:id', (req, res) => {
    const id = req.params.id;
    const employee = employees.find((employee) => employee.id === parseInt(id));

    if (employee) {
        employee.id = parseInt(id);
        employee.name = (req.body.name != undefined ? req.body.name : employee.name);
        employee.isDone = (req.body.isDone != undefined ? req.body.isDone : employee.isDone);

        res.json(employee);
    } else {
        res.status(404).json();
    }
});

// http://localhost:4000/employees/1
app.delete('/employees/:id', (req, res) => {
    const id = req.params.id;
    const employee = employees.find((employee) => employee.id === parseInt(id));

    if (employee) {
        employees.splice(employees.indexOf(employee), 1);
        res.status(204).json();
    } else {
        res.status(404).json();
    }
});

const employees = [{ id: 1, firstName: 'Jannah', lastName: 'Claravall', position: 'Web Developer', department: 'IT', isWorkingFromHome: false}, { id: 2, firstName: 'Lovelie', lastName: 'Gaspar', position: 'Web Developer', department: 'IT', isWorkingFromHome: true},];


CREATE TABLE IF NOT EXISTS Employees(Id SERIAL primary key, firstName text not null, lastName text not null, empPosition text not null, Department text not null, isWorkingFromHome boolean default false);


INSERT INTO Employees (firstName, lastName, empPosition, Department, isWorkingFromHome) VALUES ('Angela', 'Diaz', 'Cybersecurity Analyst', 'IT', true);
INSERT INTO Employees (firstName, lastName, empPosition, Department, isWorkingFromHome) VALUES ('Mark', 'Gervacio', 'HR Manager', 'HR', false);